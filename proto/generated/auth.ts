// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface User {
  id: string;
  username: string;
  email: string;
  password: string;
}

export interface AuthRegisterRequest {
  email: string;
  username: string;
  password: string;
}

export interface AuthRegisterResponse {
  accessToken: string;
  refreshToken: string;
  user: User | undefined;
}

export interface AuthLoginRequest {
  email: string;
  password: string;
}

export interface AuthLoginResponse {
  accessToken: string;
  refreshToken: string;
  user: User | undefined;
}

export interface AuthRefreshRequest {
  refreshToken: string;
}

export interface AuthRefreshResponse {
  accessToken: string;
  refreshToken: string;
}

export interface AuthLogoutRequest {
  refreshToken: string;
}

export interface AuthLogoutResponse {
  message: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  register(request: AuthRegisterRequest): Observable<AuthRegisterResponse>;

  login(request: AuthLoginRequest): Observable<AuthLoginResponse>;

  refreshToken(request: AuthRefreshRequest): Observable<AuthRefreshResponse>;

  logout(request: AuthLogoutRequest): Observable<AuthLogoutResponse>;
}

export interface AuthServiceController {
  register(
    request: AuthRegisterRequest,
  ): Promise<AuthRegisterResponse> | Observable<AuthRegisterResponse> | AuthRegisterResponse;

  login(request: AuthLoginRequest): Promise<AuthLoginResponse> | Observable<AuthLoginResponse> | AuthLoginResponse;

  refreshToken(
    request: AuthRefreshRequest,
  ): Promise<AuthRefreshResponse> | Observable<AuthRefreshResponse> | AuthRefreshResponse;

  logout(request: AuthLogoutRequest): Promise<AuthLogoutResponse> | Observable<AuthLogoutResponse> | AuthLogoutResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "refreshToken", "logout"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
