// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file auth/v1/auth.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message auth.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message auth.AuthRegisterRequest
 */
export class AuthRegisterRequest extends Message<AuthRegisterRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  constructor(data?: PartialMessage<AuthRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.AuthRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthRegisterRequest {
    return new AuthRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthRegisterRequest {
    return new AuthRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthRegisterRequest {
    return new AuthRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthRegisterRequest | PlainMessage<AuthRegisterRequest> | undefined, b: AuthRegisterRequest | PlainMessage<AuthRegisterRequest> | undefined): boolean {
    return proto3.util.equals(AuthRegisterRequest, a, b);
  }
}

/**
 * @generated from message auth.AuthRegisterResponse
 */
export class AuthRegisterResponse extends Message<AuthRegisterResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken = "";

  /**
   * @generated from field: auth.User user = 3;
   */
  user?: User;

  constructor(data?: PartialMessage<AuthRegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.AuthRegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthRegisterResponse {
    return new AuthRegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthRegisterResponse {
    return new AuthRegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthRegisterResponse {
    return new AuthRegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthRegisterResponse | PlainMessage<AuthRegisterResponse> | undefined, b: AuthRegisterResponse | PlainMessage<AuthRegisterResponse> | undefined): boolean {
    return proto3.util.equals(AuthRegisterResponse, a, b);
  }
}

/**
 * @generated from message auth.AuthLoginRequest
 */
export class AuthLoginRequest extends Message<AuthLoginRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<AuthLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.AuthLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthLoginRequest {
    return new AuthLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthLoginRequest {
    return new AuthLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthLoginRequest {
    return new AuthLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthLoginRequest | PlainMessage<AuthLoginRequest> | undefined, b: AuthLoginRequest | PlainMessage<AuthLoginRequest> | undefined): boolean {
    return proto3.util.equals(AuthLoginRequest, a, b);
  }
}

/**
 * @generated from message auth.AuthLoginResponse
 */
export class AuthLoginResponse extends Message<AuthLoginResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken = "";

  /**
   * @generated from field: auth.User user = 3;
   */
  user?: User;

  constructor(data?: PartialMessage<AuthLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.AuthLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthLoginResponse {
    return new AuthLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthLoginResponse {
    return new AuthLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthLoginResponse {
    return new AuthLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthLoginResponse | PlainMessage<AuthLoginResponse> | undefined, b: AuthLoginResponse | PlainMessage<AuthLoginResponse> | undefined): boolean {
    return proto3.util.equals(AuthLoginResponse, a, b);
  }
}

/**
 * @generated from message auth.AuthRefreshRequest
 */
export class AuthRefreshRequest extends Message<AuthRefreshRequest> {
  /**
   * @generated from field: string refresh_token = 1;
   */
  refreshToken = "";

  constructor(data?: PartialMessage<AuthRefreshRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.AuthRefreshRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthRefreshRequest {
    return new AuthRefreshRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthRefreshRequest {
    return new AuthRefreshRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthRefreshRequest {
    return new AuthRefreshRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthRefreshRequest | PlainMessage<AuthRefreshRequest> | undefined, b: AuthRefreshRequest | PlainMessage<AuthRefreshRequest> | undefined): boolean {
    return proto3.util.equals(AuthRefreshRequest, a, b);
  }
}

/**
 * @generated from message auth.AuthRefreshResponse
 */
export class AuthRefreshResponse extends Message<AuthRefreshResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken = "";

  constructor(data?: PartialMessage<AuthRefreshResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.AuthRefreshResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthRefreshResponse {
    return new AuthRefreshResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthRefreshResponse {
    return new AuthRefreshResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthRefreshResponse {
    return new AuthRefreshResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthRefreshResponse | PlainMessage<AuthRefreshResponse> | undefined, b: AuthRefreshResponse | PlainMessage<AuthRefreshResponse> | undefined): boolean {
    return proto3.util.equals(AuthRefreshResponse, a, b);
  }
}

/**
 * @generated from message auth.AuthLogoutRequest
 */
export class AuthLogoutRequest extends Message<AuthLogoutRequest> {
  /**
   * @generated from field: string refresh_token = 1;
   */
  refreshToken = "";

  constructor(data?: PartialMessage<AuthLogoutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.AuthLogoutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthLogoutRequest {
    return new AuthLogoutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthLogoutRequest {
    return new AuthLogoutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthLogoutRequest {
    return new AuthLogoutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthLogoutRequest | PlainMessage<AuthLogoutRequest> | undefined, b: AuthLogoutRequest | PlainMessage<AuthLogoutRequest> | undefined): boolean {
    return proto3.util.equals(AuthLogoutRequest, a, b);
  }
}

/**
 * @generated from message auth.AuthLogoutResponse
 */
export class AuthLogoutResponse extends Message<AuthLogoutResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<AuthLogoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.AuthLogoutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthLogoutResponse {
    return new AuthLogoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthLogoutResponse {
    return new AuthLogoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthLogoutResponse {
    return new AuthLogoutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthLogoutResponse | PlainMessage<AuthLogoutResponse> | undefined, b: AuthLogoutResponse | PlainMessage<AuthLogoutResponse> | undefined): boolean {
    return proto3.util.equals(AuthLogoutResponse, a, b);
  }
}

