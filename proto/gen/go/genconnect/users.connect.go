// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/bufbuild/buf-examples/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "users.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/users.UserService/CreateUser"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/users.UserService/GetUser"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/users.UserService/UpdateUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/users.UserService/DeleteUser"
	// UserServiceGetUsersProcedure is the fully-qualified name of the UserService's GetUsers RPC.
	UserServiceGetUsersProcedure = "/users.UserService/GetUsers"
	// UserServiceSearchProcedure is the fully-qualified name of the UserService's Search RPC.
	UserServiceSearchProcedure = "/users.UserService/Search"
)

// UserServiceClient is a client for the users.UserService service.
type UserServiceClient interface {
	CreateUser(context.Context, *connect.Request[gen.CreateUserRequest]) (*connect.Response[gen.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[gen.GetUserRequest]) (*connect.Response[gen.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[gen.UpdateUserRequest]) (*connect.Response[gen.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[gen.DeleteUserRequest]) (*connect.Response[gen.DeleteUserResponse], error)
	GetUsers(context.Context, *connect.Request[gen.GetUsersRequest]) (*connect.Response[gen.GetUsersResponse], error)
	Search(context.Context, *connect.Request[gen.SearchUsersRequest]) (*connect.Response[gen.SearchUsersResponse], error)
}

// NewUserServiceClient constructs a client for the users.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := gen.File_users_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		createUser: connect.NewClient[gen.CreateUserRequest, gen.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[gen.GetUserRequest, gen.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[gen.UpdateUserRequest, gen.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[gen.DeleteUserRequest, gen.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		getUsers: connect.NewClient[gen.GetUsersRequest, gen.GetUsersResponse](
			httpClient,
			baseURL+UserServiceGetUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUsers")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[gen.SearchUsersRequest, gen.SearchUsersResponse](
			httpClient,
			baseURL+UserServiceSearchProcedure,
			connect.WithSchema(userServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser *connect.Client[gen.CreateUserRequest, gen.CreateUserResponse]
	getUser    *connect.Client[gen.GetUserRequest, gen.GetUserResponse]
	updateUser *connect.Client[gen.UpdateUserRequest, gen.UpdateUserResponse]
	deleteUser *connect.Client[gen.DeleteUserRequest, gen.DeleteUserResponse]
	getUsers   *connect.Client[gen.GetUsersRequest, gen.GetUsersResponse]
	search     *connect.Client[gen.SearchUsersRequest, gen.SearchUsersResponse]
}

// CreateUser calls users.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[gen.CreateUserRequest]) (*connect.Response[gen.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls users.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[gen.GetUserRequest]) (*connect.Response[gen.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls users.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[gen.UpdateUserRequest]) (*connect.Response[gen.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls users.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[gen.DeleteUserRequest]) (*connect.Response[gen.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetUsers calls users.UserService.GetUsers.
func (c *userServiceClient) GetUsers(ctx context.Context, req *connect.Request[gen.GetUsersRequest]) (*connect.Response[gen.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// Search calls users.UserService.Search.
func (c *userServiceClient) Search(ctx context.Context, req *connect.Request[gen.SearchUsersRequest]) (*connect.Response[gen.SearchUsersResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the users.UserService service.
type UserServiceHandler interface {
	CreateUser(context.Context, *connect.Request[gen.CreateUserRequest]) (*connect.Response[gen.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[gen.GetUserRequest]) (*connect.Response[gen.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[gen.UpdateUserRequest]) (*connect.Response[gen.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[gen.DeleteUserRequest]) (*connect.Response[gen.DeleteUserResponse], error)
	GetUsers(context.Context, *connect.Request[gen.GetUsersRequest]) (*connect.Response[gen.GetUsersResponse], error)
	Search(context.Context, *connect.Request[gen.SearchUsersRequest]) (*connect.Response[gen.SearchUsersResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := gen.File_users_proto.Services().ByName("UserService").Methods()
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUsersHandler := connect.NewUnaryHandler(
		UserServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(userServiceMethods.ByName("GetUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSearchHandler := connect.NewUnaryHandler(
		UserServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(userServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	return "/users.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceGetUsersProcedure:
			userServiceGetUsersHandler.ServeHTTP(w, r)
		case UserServiceSearchProcedure:
			userServiceSearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[gen.CreateUserRequest]) (*connect.Response[gen.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[gen.GetUserRequest]) (*connect.Response[gen.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[gen.UpdateUserRequest]) (*connect.Response[gen.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[gen.DeleteUserRequest]) (*connect.Response[gen.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUsers(context.Context, *connect.Request[gen.GetUsersRequest]) (*connect.Response[gen.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UserService.GetUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) Search(context.Context, *connect.Request[gen.SearchUsersRequest]) (*connect.Response[gen.SearchUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UserService.Search is not implemented"))
}
